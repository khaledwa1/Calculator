
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000c70  00000d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800082  00800082  00000d26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000186a  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1c  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cff  00000000  00000000  0000310a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3e  00000000  00000000  00004557  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 03 	call	0x616	; 0x616 <main>
  8a:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
{

	/*Setting Rows pins as outputs*/
	//DDRC = 0x3C;
	//DDRD = 0x00;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW1_PIN,PIN_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW2_PIN,PIN_OUTPUT);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	64 e0       	ldi	r22, 0x04	; 4
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW3_PIN,PIN_OUTPUT);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW4_PIN,PIN_OUTPUT);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_COL1_PIN,PIN_INPUT);
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	67 e0       	ldi	r22, 0x07	; 7
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_COL2_PIN,PIN_INPUT);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	66 e0       	ldi	r22, 0x06	; 6
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_COL3_PIN,PIN_INPUT);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	65 e0       	ldi	r22, 0x05	; 5
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_COL4_PIN,PIN_INPUT);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>


	PORTD = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	08 95       	ret

000000e8 <keyfind>:
	while(1)
	{

		do
		{
			PORTD &= 0xE8;      		/* mask PORT for column read only */
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	88 7e       	andi	r24, 0xE8	; 232
  ec:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
  ee:	00 00       	nop
			colloc = (PIND & 0xE8); 	/* read status of column */
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	88 7e       	andi	r24, 0xE8	; 232
  f4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
		}while(colloc != 0xE8);
  f8:	88 3e       	cpi	r24, 0xE8	; 232
  fa:	b1 f7       	brne	.-20     	; 0xe8 <keyfind>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	87 e8       	ldi	r24, 0x87	; 135
  fe:	93 e1       	ldi	r25, 0x13	; 19
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <keyfind+0x18>
 104:	00 c0       	rjmp	.+0      	; 0x106 <keyfind+0x1e>
 106:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
			colloc = (PIND & 0xE8);        /* read status of column */
 108:	80 b3       	in	r24, 0x10	; 16
 10a:	88 7e       	andi	r24, 0xE8	; 232
 10c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
			}while(colloc == 0xE8);        /* check for any key press */
 110:	88 3e       	cpi	r24, 0xE8	; 232
 112:	a1 f3       	breq	.-24     	; 0xfc <keyfind+0x14>
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	97 e2       	ldi	r25, 0x27	; 39
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <keyfind+0x30>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <keyfind+0x36>
 11e:	00 00       	nop

			_delay_ms (40);	            /* 20 ms key debounce time */
			colloc = (PIND & 0xE8);
 120:	80 b3       	in	r24, 0x10	; 16
 122:	88 7e       	andi	r24, 0xE8	; 232
 124:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
		}while(colloc == 0xE8);
 128:	88 3e       	cpi	r24, 0xE8	; 232
 12a:	41 f3       	breq	.-48     	; 0xfc <keyfind+0x14>

		/* now check for rows */
		PORTC = 0x38;            /* check for pressed key in 1st row .. 1st row low and the rest is high*/
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	85 bb       	out	0x15, r24	; 21
		asm("NOP");
 130:	00 00       	nop
		colloc = (PIND & 0xE8);
 132:	80 b3       	in	r24, 0x10	; 16
 134:	88 7e       	andi	r24, 0xE8	; 232
 136:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
		if(colloc != 0xE8)
 13a:	88 3e       	cpi	r24, 0xE8	; 232
 13c:	21 f0       	breq	.+8      	; 0x146 <keyfind+0x5e>
		{
			rowloc = 0;
 13e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <rowloc>
			PORTC = 0x00;
 142:	15 ba       	out	0x15, r1	; 21
			break;
 144:	2a c0       	rjmp	.+84     	; 0x19a <keyfind+0xb2>

		}

		PORTC = 0x34;		/* check for pressed key in 2nd row */
 146:	84 e3       	ldi	r24, 0x34	; 52
 148:	85 bb       	out	0x15, r24	; 21
		asm("NOP");
 14a:	00 00       	nop
		colloc = (PIND & 0xE8);
 14c:	80 b3       	in	r24, 0x10	; 16
 14e:	88 7e       	andi	r24, 0xE8	; 232
 150:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
		if(colloc != 0xE8)
 154:	88 3e       	cpi	r24, 0xE8	; 232
 156:	29 f0       	breq	.+10     	; 0x162 <keyfind+0x7a>
		{
			rowloc = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <rowloc>
			PORTC = 0x00;
 15e:	15 ba       	out	0x15, r1	; 21
			break;
 160:	1c c0       	rjmp	.+56     	; 0x19a <keyfind+0xb2>

		}

		PORTC = 0x2C;		/* check for pressed key in 3rd row */
 162:	8c e2       	ldi	r24, 0x2C	; 44
 164:	85 bb       	out	0x15, r24	; 21
		asm("NOP");
 166:	00 00       	nop
		colloc = (PIND & 0xE8);
 168:	80 b3       	in	r24, 0x10	; 16
 16a:	88 7e       	andi	r24, 0xE8	; 232
 16c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
		if(colloc != 0xE8)
 170:	88 3e       	cpi	r24, 0xE8	; 232
 172:	29 f0       	breq	.+10     	; 0x17e <keyfind+0x96>
		{
			rowloc = 2;
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <rowloc>
			PORTC = 0x00;
 17a:	15 ba       	out	0x15, r1	; 21
			break;
 17c:	0e c0       	rjmp	.+28     	; 0x19a <keyfind+0xb2>

		}

		PORTC = 0x1C;		/* check for pressed key in 4th row */
 17e:	8c e1       	ldi	r24, 0x1C	; 28
 180:	85 bb       	out	0x15, r24	; 21
		asm("NOP");
 182:	00 00       	nop
		colloc = (PIND & 0xE8);
 184:	80 b3       	in	r24, 0x10	; 16
 186:	88 7e       	andi	r24, 0xE8	; 232
 188:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
		if(colloc != 0xE8)
 18c:	88 3e       	cpi	r24, 0xE8	; 232
 18e:	09 f4       	brne	.+2      	; 0x192 <keyfind+0xaa>
 190:	ab cf       	rjmp	.-170    	; 0xe8 <keyfind>
		{
			rowloc = 3;
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <rowloc>
			PORTC = 0x00;
 198:	15 ba       	out	0x15, r1	; 21
			break;

		}
	}

	if(colloc == 0x68)
 19a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 19e:	88 36       	cpi	r24, 0x68	; 104
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <keyfind+0xd0>
		return(keypad[rowloc][0]);
 1a2:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <rowloc>
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e0 5a       	subi	r30, 0xA0	; 160
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	80 81       	ld	r24, Z
 1b6:	08 95       	ret
	else if(colloc == 0xA8)
 1b8:	88 3a       	cpi	r24, 0xA8	; 168
 1ba:	59 f4       	brne	.+22     	; 0x1d2 <keyfind+0xea>
		return(keypad[rowloc][1]);
 1bc:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <rowloc>
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	ee 0f       	add	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	e0 5a       	subi	r30, 0xA0	; 160
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	81 81       	ldd	r24, Z+1	; 0x01
 1d0:	08 95       	ret
	else if(colloc == 0xC8)
 1d2:	88 3c       	cpi	r24, 0xC8	; 200
 1d4:	59 f4       	brne	.+22     	; 0x1ec <keyfind+0x104>
		return(keypad[rowloc][2]);
 1d6:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <rowloc>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	e0 5a       	subi	r30, 0xA0	; 160
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	08 95       	ret
	else
		return(keypad[rowloc][3]);
 1ec:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <rowloc>
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e0 5a       	subi	r30, 0xA0	; 160
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	83 81       	ldd	r24, Z+3	; 0x03

}
 200:	08 95       	ret

00000202 <LCD_sendCommand>:
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 202:	cf 93       	push	r28
 204:	c8 2f       	mov	r28, r24
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	63 e0       	ldi	r22, 0x03	; 3
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 210:	89 ef       	ldi	r24, 0xF9	; 249
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCD_sendCommand+0x12>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_sendCommand+0x18>
 21a:	00 00       	nop
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 226:	89 ef       	ldi	r24, 0xF9	; 249
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_sendCommand+0x28>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_sendCommand+0x2e>
 230:	00 00       	nop
 232:	4c 2f       	mov	r20, r28
 234:	40 71       	andi	r20, 0x10	; 16
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	55 95       	asr	r21
 23a:	47 95       	ror	r20
 23c:	55 95       	asr	r21
 23e:	47 95       	ror	r20
 240:	55 95       	asr	r21
 242:	47 95       	ror	r20
 244:	55 95       	asr	r21
 246:	47 95       	ror	r20
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 250:	4c 2f       	mov	r20, r28
 252:	40 72       	andi	r20, 0x20	; 32
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	55 95       	asr	r21
 258:	47 95       	ror	r20
 25a:	55 95       	asr	r21
 25c:	47 95       	ror	r20
 25e:	55 95       	asr	r21
 260:	47 95       	ror	r20
 262:	55 95       	asr	r21
 264:	47 95       	ror	r20
 266:	55 95       	asr	r21
 268:	47 95       	ror	r20
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 272:	4c 2f       	mov	r20, r28
 274:	40 74       	andi	r20, 0x40	; 64
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	04 2e       	mov	r0, r20
 27a:	45 2f       	mov	r20, r21
 27c:	00 0c       	add	r0, r0
 27e:	44 1f       	adc	r20, r20
 280:	55 0b       	sbc	r21, r21
 282:	00 0c       	add	r0, r0
 284:	44 1f       	adc	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	62 e0       	ldi	r22, 0x02	; 2
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 290:	4c 2f       	mov	r20, r28
 292:	44 1f       	adc	r20, r20
 294:	44 27       	eor	r20, r20
 296:	44 1f       	adc	r20, r20
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 2a0:	89 ef       	ldi	r24, 0xF9	; 249
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_sendCommand+0xa2>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_sendCommand+0xa8>
 2aa:	00 00       	nop
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 2b6:	89 ef       	ldi	r24, 0xF9	; 249
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_sendCommand+0xb8>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_sendCommand+0xbe>
 2c0:	00 00       	nop
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 2cc:	89 ef       	ldi	r24, 0xF9	; 249
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_sendCommand+0xce>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_sendCommand+0xd4>
 2d6:	00 00       	nop
 2d8:	4c 2f       	mov	r20, r28
 2da:	41 70       	andi	r20, 0x01	; 1
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 2e4:	4c 2f       	mov	r20, r28
 2e6:	42 70       	andi	r20, 0x02	; 2
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	55 95       	asr	r21
 2ec:	47 95       	ror	r20
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 2f6:	4c 2f       	mov	r20, r28
 2f8:	44 70       	andi	r20, 0x04	; 4
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	55 95       	asr	r21
 302:	47 95       	ror	r20
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 30c:	c8 70       	andi	r28, 0x08	; 8
 30e:	4c 2f       	mov	r20, r28
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	55 95       	asr	r21
 314:	47 95       	ror	r20
 316:	55 95       	asr	r21
 318:	47 95       	ror	r20
 31a:	55 95       	asr	r21
 31c:	47 95       	ror	r20
 31e:	64 e0       	ldi	r22, 0x04	; 4
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 326:	89 ef       	ldi	r24, 0xF9	; 249
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_sendCommand+0x128>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_sendCommand+0x12e>
 330:	00 00       	nop
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 33c:	89 ef       	ldi	r24, 0xF9	; 249
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_sendCommand+0x13e>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_sendCommand+0x144>
 346:	00 00       	nop
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <LCD_init>:
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
 360:	87 e8       	ldi	r24, 0x87	; 135
 362:	93 e1       	ldi	r25, 0x13	; 19
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_init+0x18>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_init+0x1e>
 36a:	00 00       	nop
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	64 e0       	ldi	r22, 0x04	; 4
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 b2 03 	call	0x764	; 0x764 <GPIO_setupPinDirection>
 394:	83 e3       	ldi	r24, 0x33	; 51
 396:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
 39a:	82 e3       	ldi	r24, 0x32	; 50
 39c:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
 3a0:	88 e2       	ldi	r24, 0x28	; 40
 3a2:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
 3a6:	8c e0       	ldi	r24, 0x0C	; 12
 3a8:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
 3b2:	08 95       	ret

000003b4 <LCD_displayCharacter>:
 3b4:	cf 93       	push	r28
 3b6:	c8 2f       	mov	r28, r24
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 3c2:	89 ef       	ldi	r24, 0xF9	; 249
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_displayCharacter+0x12>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_displayCharacter+0x18>
 3cc:	00 00       	nop
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 3d8:	89 ef       	ldi	r24, 0xF9	; 249
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_displayCharacter+0x28>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_displayCharacter+0x2e>
 3e2:	00 00       	nop
 3e4:	4c 2f       	mov	r20, r28
 3e6:	40 71       	andi	r20, 0x10	; 16
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	55 95       	asr	r21
 3ec:	47 95       	ror	r20
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	55 95       	asr	r21
 3f4:	47 95       	ror	r20
 3f6:	55 95       	asr	r21
 3f8:	47 95       	ror	r20
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 402:	4c 2f       	mov	r20, r28
 404:	40 72       	andi	r20, 0x20	; 32
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	55 95       	asr	r21
 40a:	47 95       	ror	r20
 40c:	55 95       	asr	r21
 40e:	47 95       	ror	r20
 410:	55 95       	asr	r21
 412:	47 95       	ror	r20
 414:	55 95       	asr	r21
 416:	47 95       	ror	r20
 418:	55 95       	asr	r21
 41a:	47 95       	ror	r20
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 424:	4c 2f       	mov	r20, r28
 426:	40 74       	andi	r20, 0x40	; 64
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	04 2e       	mov	r0, r20
 42c:	45 2f       	mov	r20, r21
 42e:	00 0c       	add	r0, r0
 430:	44 1f       	adc	r20, r20
 432:	55 0b       	sbc	r21, r21
 434:	00 0c       	add	r0, r0
 436:	44 1f       	adc	r20, r20
 438:	55 1f       	adc	r21, r21
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 442:	4c 2f       	mov	r20, r28
 444:	44 1f       	adc	r20, r20
 446:	44 27       	eor	r20, r20
 448:	44 1f       	adc	r20, r20
 44a:	64 e0       	ldi	r22, 0x04	; 4
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 452:	89 ef       	ldi	r24, 0xF9	; 249
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 468:	89 ef       	ldi	r24, 0xF9	; 249
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 472:	00 00       	nop
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 47e:	89 ef       	ldi	r24, 0xF9	; 249
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 488:	00 00       	nop
 48a:	4c 2f       	mov	r20, r28
 48c:	41 70       	andi	r20, 0x01	; 1
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 496:	4c 2f       	mov	r20, r28
 498:	42 70       	andi	r20, 0x02	; 2
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	55 95       	asr	r21
 49e:	47 95       	ror	r20
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 4a8:	4c 2f       	mov	r20, r28
 4aa:	44 70       	andi	r20, 0x04	; 4
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	55 95       	asr	r21
 4b0:	47 95       	ror	r20
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 4be:	c8 70       	andi	r28, 0x08	; 8
 4c0:	4c 2f       	mov	r20, r28
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	55 95       	asr	r21
 4c6:	47 95       	ror	r20
 4c8:	55 95       	asr	r21
 4ca:	47 95       	ror	r20
 4cc:	55 95       	asr	r21
 4ce:	47 95       	ror	r20
 4d0:	64 e0       	ldi	r22, 0x04	; 4
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 4d8:	89 ef       	ldi	r24, 0xF9	; 249
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e2:	00 00       	nop
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 25 04 	call	0x84a	; 0x84a <GPIO_writePin>
 4ee:	89 ef       	ldi	r24, 0xF9	; 249
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <LCD_displayString>:
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	8c 01       	movw	r16, r24
 506:	c0 e0       	ldi	r28, 0x00	; 0
 508:	03 c0       	rjmp	.+6      	; 0x510 <LCD_displayString+0x12>
 50a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayCharacter>
 50e:	cf 5f       	subi	r28, 0xFF	; 255
 510:	f8 01       	movw	r30, r16
 512:	ec 0f       	add	r30, r28
 514:	f1 1d       	adc	r31, r1
 516:	80 81       	ld	r24, Z
 518:	81 11       	cpse	r24, r1
 51a:	f7 cf       	rjmp	.-18     	; 0x50a <LCD_displayString+0xc>
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <LCD_moveCursor>:
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	39 f0       	breq	.+14     	; 0x536 <LCD_moveCursor+0x12>
 528:	58 f0       	brcs	.+22     	; 0x540 <LCD_moveCursor+0x1c>
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	31 f0       	breq	.+12     	; 0x53a <LCD_moveCursor+0x16>
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	31 f0       	breq	.+12     	; 0x53e <LCD_moveCursor+0x1a>
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	05 c0       	rjmp	.+10     	; 0x540 <LCD_moveCursor+0x1c>
 536:	60 5c       	subi	r22, 0xC0	; 192
 538:	03 c0       	rjmp	.+6      	; 0x540 <LCD_moveCursor+0x1c>
 53a:	60 5f       	subi	r22, 0xF0	; 240
 53c:	01 c0       	rjmp	.+2      	; 0x540 <LCD_moveCursor+0x1c>
 53e:	60 5b       	subi	r22, 0xB0	; 176
 540:	86 2f       	mov	r24, r22
 542:	80 68       	ori	r24, 0x80	; 128
 544:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
 548:	08 95       	ret

0000054a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	60 97       	sbiw	r28, 0x10	; 16
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 55e:	4a e0       	ldi	r20, 0x0A	; 10
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	be 01       	movw	r22, r28
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	0e 94 f6 05 	call	0xbec	; 0xbec <itoa>
   LCD_displayString(buff); /* Display the string */
 56c:	ce 01       	movw	r24, r28
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_displayString>
}
 574:	60 96       	adiw	r28, 0x10	; 16
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <power>:
#include <stdio.h>
#include <stdlib.h>



int power(int base, int exponent) {
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	eb 01       	movw	r28, r22
  int result = 1.0;

  if (exponent < 0) {
 58c:	dd 23       	and	r29, r29
 58e:	a4 f4       	brge	.+40     	; 0x5b8 <power+0x32>
    base = 1.0 / base;
 590:	bc 01       	movw	r22, r24
 592:	99 0f       	add	r25, r25
 594:	88 0b       	sbc	r24, r24
 596:	99 0b       	sbc	r25, r25
 598:	0e 94 42 05 	call	0xa84	; 0xa84 <__floatsisf>
 59c:	9b 01       	movw	r18, r22
 59e:	ac 01       	movw	r20, r24
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	9f e3       	ldi	r25, 0x3F	; 63
 5a8:	0e 94 98 04 	call	0x930	; 0x930 <__divsf3>
 5ac:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fixsfsi>
 5b0:	cb 01       	movw	r24, r22
    exponent = -exponent;
 5b2:	d1 95       	neg	r29
 5b4:	c1 95       	neg	r28
 5b6:	d1 09       	sbc	r29, r1
#include <stdio.h>
#include <stdlib.h>



int power(int base, int exponent) {
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	25 c0       	rjmp	.+74     	; 0x608 <power+0x82>
    base = 1.0 / base;
    exponent = -exponent;
  }

  while (exponent > 0) {
    if (exponent % 2 == 1) {
 5be:	9e 01       	movw	r18, r28
 5c0:	21 70       	andi	r18, 0x01	; 1
 5c2:	30 78       	andi	r19, 0x80	; 128
 5c4:	33 23       	and	r19, r19
 5c6:	34 f4       	brge	.+12     	; 0x5d4 <power+0x4e>
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	31 09       	sbc	r19, r1
 5cc:	2e 6f       	ori	r18, 0xFE	; 254
 5ce:	3f 6f       	ori	r19, 0xFF	; 255
 5d0:	2f 5f       	subi	r18, 0xFF	; 255
 5d2:	3f 4f       	sbci	r19, 0xFF	; 255
 5d4:	21 30       	cpi	r18, 0x01	; 1
 5d6:	31 05       	cpc	r19, r1
 5d8:	41 f4       	brne	.+16     	; 0x5ea <power+0x64>
      result *= base;
 5da:	9a 01       	movw	r18, r20
 5dc:	28 9f       	mul	r18, r24
 5de:	a0 01       	movw	r20, r0
 5e0:	29 9f       	mul	r18, r25
 5e2:	50 0d       	add	r21, r0
 5e4:	38 9f       	mul	r19, r24
 5e6:	50 0d       	add	r21, r0
 5e8:	11 24       	eor	r1, r1
    }
    base *= base;
 5ea:	9c 01       	movw	r18, r24
 5ec:	22 9f       	mul	r18, r18
 5ee:	c0 01       	movw	r24, r0
 5f0:	23 9f       	mul	r18, r19
 5f2:	90 0d       	add	r25, r0
 5f4:	90 0d       	add	r25, r0
 5f6:	11 24       	eor	r1, r1
    exponent /= 2;
 5f8:	9e 01       	movw	r18, r28
 5fa:	dd 23       	and	r29, r29
 5fc:	14 f4       	brge	.+4      	; 0x602 <power+0x7c>
 5fe:	2f 5f       	subi	r18, 0xFF	; 255
 600:	3f 4f       	sbci	r19, 0xFF	; 255
 602:	e9 01       	movw	r28, r18
 604:	d5 95       	asr	r29
 606:	c7 95       	ror	r28
  if (exponent < 0) {
    base = 1.0 / base;
    exponent = -exponent;
  }

  while (exponent > 0) {
 608:	1c 16       	cp	r1, r28
 60a:	1d 06       	cpc	r1, r29
 60c:	c4 f2       	brlt	.-80     	; 0x5be <power+0x38>
    base *= base;
    exponent /= 2;
  }

  return result;
}
 60e:	ca 01       	movw	r24, r20
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <main>:
{
	int operand1 = 0;
	int operand2 = 0;
	char operator ='\0';
	int result=0;
	LCD_init();
 616:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_init>
	keypad_init();
 61a:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	 */
	int index=0;
	int index2=0;

	//LCD_displayStringRowColumn(0,1,"kw");
	LCD_moveCursor(0,1);
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 92 02 	call	0x524	; 0x524 <LCD_moveCursor>
 626:	8f e1       	ldi	r24, 0x1F	; 31
 628:	9e e4       	ldi	r25, 0x4E	; 78
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <main+0x14>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <main+0x1a>
 630:	00 00       	nop

  return result;
}

int main(void)
{
 632:	e1 2c       	mov	r14, r1
 634:	f1 2c       	mov	r15, r1
 636:	00 e0       	ldi	r16, 0x00	; 0
 638:	10 e0       	ldi	r17, 0x00	; 0
 63a:	d0 e0       	ldi	r29, 0x00	; 0
 63c:	a1 2c       	mov	r10, r1
 63e:	b1 2c       	mov	r11, r1
 640:	c1 2c       	mov	r12, r1
 642:	d1 2c       	mov	r13, r1



	while(1)
	{
		key = keyfind();
 644:	0e 94 74 00 	call	0xe8	; 0xe8 <keyfind>
 648:	c8 2f       	mov	r28, r24
		if (key == ' ')
 64a:	80 32       	cpi	r24, 0x20	; 32
 64c:	19 f4       	brne	.+6      	; 0x654 <main+0x3e>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		}

		if(key == '+' || key == '-' || key == '*' || key == '/')
 654:	cb 32       	cpi	r28, 0x2B	; 43
 656:	31 f0       	breq	.+12     	; 0x664 <main+0x4e>
 658:	cd 32       	cpi	r28, 0x2D	; 45
 65a:	21 f0       	breq	.+8      	; 0x664 <main+0x4e>
 65c:	ca 32       	cpi	r28, 0x2A	; 42
 65e:	11 f0       	breq	.+4      	; 0x664 <main+0x4e>
 660:	cf 32       	cpi	r28, 0x2F	; 47
 662:	21 f4       	brne	.+8      	; 0x66c <main+0x56>
		{
			operator = key;
			LCD_displayCharacter(key);
 664:	8c 2f       	mov	r24, r28
 666:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayCharacter>
			LCD_sendCommand(LCD_CLEAR_COMMAND);
		}

		if(key == '+' || key == '-' || key == '*' || key == '/')
		{
			operator = key;
 66a:	dc 2f       	mov	r29, r28
		/*
		LCD_moveCursor(0,index);
		LCD_displayCharacter(key);
		index++;
		 */
		if(operator == '\0')
 66c:	d1 11       	cpse	r29, r1
 66e:	21 c0       	rjmp	.+66     	; 0x6b2 <main+0x9c>
		{
			if (key >= '0' && key <= '9')
 670:	80 ed       	ldi	r24, 0xD0	; 208
 672:	8c 0f       	add	r24, r28
 674:	8a 30       	cpi	r24, 0x0A	; 10
 676:	08 f0       	brcs	.+2      	; 0x67a <main+0x64>
 678:	3f c0       	rjmp	.+126    	; 0x6f8 <main+0xe2>
			{
				// If the key is a digit, add it to the total
				if(index !=0)
 67a:	01 15       	cp	r16, r1
 67c:	11 05       	cpc	r17, r1
 67e:	71 f0       	breq	.+28     	; 0x69c <main+0x86>
				{
					int p =power(10,1);
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	8a e0       	ldi	r24, 0x0A	; 10
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 c3 02 	call	0x586	; 0x586 <power>
					operand1 *= p;
 68c:	96 01       	movw	r18, r12
 68e:	28 9f       	mul	r18, r24
 690:	60 01       	movw	r12, r0
 692:	29 9f       	mul	r18, r25
 694:	d0 0c       	add	r13, r0
 696:	38 9f       	mul	r19, r24
 698:	d0 0c       	add	r13, r0
 69a:	11 24       	eor	r1, r1

				}

				operand1 += key - '0';
 69c:	8c 2f       	mov	r24, r28
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	c0 97       	sbiw	r24, 0x30	; 48
 6a2:	c8 0e       	add	r12, r24
 6a4:	d9 1e       	adc	r13, r25
				index++;
 6a6:	0f 5f       	subi	r16, 0xFF	; 255
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255


				// Display the updated total on the LCD

				
				LCD_displayCharacter(key);
 6aa:	8c 2f       	mov	r24, r28
 6ac:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayCharacter>
 6b0:	23 c0       	rjmp	.+70     	; 0x6f8 <main+0xe2>
			}
		}
		else
		{
			if (key >= '0' && key <= '9')
 6b2:	80 ed       	ldi	r24, 0xD0	; 208
 6b4:	8c 0f       	add	r24, r28
 6b6:	8a 30       	cpi	r24, 0x0A	; 10
 6b8:	f8 f4       	brcc	.+62     	; 0x6f8 <main+0xe2>
			{
				if(index2 !=0)
 6ba:	e1 14       	cp	r14, r1
 6bc:	f1 04       	cpc	r15, r1
 6be:	89 f0       	breq	.+34     	; 0x6e2 <main+0xcc>
				{
					if(index !=0)
 6c0:	01 15       	cp	r16, r1
 6c2:	11 05       	cpc	r17, r1
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <main+0xcc>
					{
						int p =power(10,1);
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	8a e0       	ldi	r24, 0x0A	; 10
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 c3 02 	call	0x586	; 0x586 <power>
						operand2 *= p;
 6d2:	95 01       	movw	r18, r10
 6d4:	28 9f       	mul	r18, r24
 6d6:	50 01       	movw	r10, r0
 6d8:	29 9f       	mul	r18, r25
 6da:	b0 0c       	add	r11, r0
 6dc:	38 9f       	mul	r19, r24
 6de:	b0 0c       	add	r11, r0
 6e0:	11 24       	eor	r1, r1

					}
				}


				operand2 += key - '0';
 6e2:	8c 2f       	mov	r24, r28
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	c0 97       	sbiw	r24, 0x30	; 48
 6e8:	a8 0e       	add	r10, r24
 6ea:	b9 1e       	adc	r11, r25
				index2++;
 6ec:	3f ef       	ldi	r19, 0xFF	; 255
 6ee:	e3 1a       	sub	r14, r19
 6f0:	f3 0a       	sbc	r15, r19
				// If the key is a digit, add it to the total

				// Display the updated total on the LCD

				
				LCD_displayCharacter(key);
 6f2:	8c 2f       	mov	r24, r28
 6f4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayCharacter>

			}

		}
		if(key == '=')
 6f8:	cd 33       	cpi	r28, 0x3D	; 61
 6fa:	09 f0       	breq	.+2      	; 0x6fe <main+0xe8>
 6fc:	a3 cf       	rjmp	.-186    	; 0x644 <main+0x2e>
		{
			LCD_displayCharacter(key);
 6fe:	8c 2f       	mov	r24, r28
 700:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayCharacter>
			index=0;
			index2=0;

			switch (operator)
 704:	db 32       	cpi	r29, 0x2B	; 43
 706:	49 f0       	breq	.+18     	; 0x71a <main+0x104>
 708:	18 f4       	brcc	.+6      	; 0x710 <main+0xfa>
 70a:	da 32       	cpi	r29, 0x2A	; 42
 70c:	09 f1       	breq	.+66     	; 0x750 <main+0x13a>
 70e:	91 cf       	rjmp	.-222    	; 0x632 <main+0x1c>
 710:	dd 32       	cpi	r29, 0x2D	; 45
 712:	49 f0       	breq	.+18     	; 0x726 <main+0x110>
 714:	df 32       	cpi	r29, 0x2F	; 47
 716:	69 f0       	breq	.+26     	; 0x732 <main+0x11c>
 718:	8c cf       	rjmp	.-232    	; 0x632 <main+0x1c>
			{
			case '+':
				result =operand1+operand2;
				LCD_intgerToString(result);
 71a:	c6 01       	movw	r24, r12
 71c:	8a 0d       	add	r24, r10
 71e:	9b 1d       	adc	r25, r11
 720:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_intgerToString>
				break;
 724:	86 cf       	rjmp	.-244    	; 0x632 <main+0x1c>
			case '-':
				result =operand1-operand2;
				LCD_intgerToString(result);
 726:	c6 01       	movw	r24, r12
 728:	8a 19       	sub	r24, r10
 72a:	9b 09       	sbc	r25, r11
 72c:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_intgerToString>
				break;
 730:	80 cf       	rjmp	.-256    	; 0x632 <main+0x1c>
			case '/':
				result =operand1/operand2;
 732:	c6 01       	movw	r24, r12
 734:	b5 01       	movw	r22, r10
 736:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__divmodhi4>
				if(operand2 == 0)
 73a:	ab 28       	or	r10, r11
 73c:	29 f4       	brne	.+10     	; 0x748 <main+0x132>
				{
					LCD_displayString("Invalid Operation");
 73e:	80 e7       	ldi	r24, 0x70	; 112
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_displayString>
 746:	75 cf       	rjmp	.-278    	; 0x632 <main+0x1c>
				}
				else
				{
					LCD_intgerToString(result);
 748:	cb 01       	movw	r24, r22
 74a:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_intgerToString>
 74e:	71 cf       	rjmp	.-286    	; 0x632 <main+0x1c>
				}

				break;
			case '*':
				result =operand1*operand2;
				LCD_intgerToString(result);
 750:	ca 9c       	mul	r12, r10
 752:	c0 01       	movw	r24, r0
 754:	cb 9c       	mul	r12, r11
 756:	90 0d       	add	r25, r0
 758:	da 9c       	mul	r13, r10
 75a:	90 0d       	add	r25, r0
 75c:	11 24       	eor	r1, r1
 75e:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_intgerToString>
				LCD_intgerToString(operand1);
				LCD_displayCharacter('-');
				LCD_intgerToString(operand2);*/
				
				
				break;
 762:	67 cf       	rjmp	.-306    	; 0x632 <main+0x1c>

00000764 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 764:	68 30       	cpi	r22, 0x08	; 8
 766:	08 f0       	brcs	.+2      	; 0x76a <GPIO_setupPinDirection+0x6>
 768:	6f c0       	rjmp	.+222    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 76a:	84 30       	cpi	r24, 0x04	; 4
 76c:	08 f0       	brcs	.+2      	; 0x770 <GPIO_setupPinDirection+0xc>
 76e:	6c c0       	rjmp	.+216    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	01 f1       	breq	.+64     	; 0x7b4 <GPIO_setupPinDirection+0x50>
 774:	30 f0       	brcs	.+12     	; 0x782 <GPIO_setupPinDirection+0x1e>
 776:	82 30       	cpi	r24, 0x02	; 2
 778:	b1 f1       	breq	.+108    	; 0x7e6 <GPIO_setupPinDirection+0x82>
 77a:	83 30       	cpi	r24, 0x03	; 3
 77c:	09 f4       	brne	.+2      	; 0x780 <GPIO_setupPinDirection+0x1c>
 77e:	4c c0       	rjmp	.+152    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 780:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 782:	41 30       	cpi	r20, 0x01	; 1
 784:	59 f4       	brne	.+22     	; 0x79c <GPIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
 786:	2a b3       	in	r18, 0x1a	; 26
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <GPIO_setupPinDirection+0x2e>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	6a 95       	dec	r22
 794:	e2 f7       	brpl	.-8      	; 0x78e <GPIO_setupPinDirection+0x2a>
 796:	82 2b       	or	r24, r18
 798:	8a bb       	out	0x1a, r24	; 26
 79a:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 79c:	2a b3       	in	r18, 0x1a	; 26
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <GPIO_setupPinDirection+0x44>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <GPIO_setupPinDirection+0x40>
 7ac:	80 95       	com	r24
 7ae:	82 23       	and	r24, r18
 7b0:	8a bb       	out	0x1a, r24	; 26
 7b2:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 7b4:	41 30       	cpi	r20, 0x01	; 1
 7b6:	59 f4       	brne	.+22     	; 0x7ce <GPIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
 7b8:	27 b3       	in	r18, 0x17	; 23
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <GPIO_setupPinDirection+0x60>
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	6a 95       	dec	r22
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <GPIO_setupPinDirection+0x5c>
 7c8:	82 2b       	or	r24, r18
 7ca:	87 bb       	out	0x17, r24	; 23
 7cc:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 7ce:	27 b3       	in	r18, 0x17	; 23
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <GPIO_setupPinDirection+0x76>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	6a 95       	dec	r22
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <GPIO_setupPinDirection+0x72>
 7de:	80 95       	com	r24
 7e0:	82 23       	and	r24, r18
 7e2:	87 bb       	out	0x17, r24	; 23
 7e4:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 7e6:	41 30       	cpi	r20, 0x01	; 1
 7e8:	59 f4       	brne	.+22     	; 0x800 <__DATA_REGION_LENGTH__>
			{
				SET_BIT(DDRC,pin_num);
 7ea:	24 b3       	in	r18, 0x14	; 20
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <GPIO_setupPinDirection+0x92>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <GPIO_setupPinDirection+0x8e>
 7fa:	82 2b       	or	r24, r18
 7fc:	84 bb       	out	0x14, r24	; 20
 7fe:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 800:	24 b3       	in	r18, 0x14	; 20
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	80 95       	com	r24
 812:	82 23       	and	r24, r18
 814:	84 bb       	out	0x14, r24	; 20
 816:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 818:	41 30       	cpi	r20, 0x01	; 1
 81a:	59 f4       	brne	.+22     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
			{
				SET_BIT(DDRD,pin_num);
 81c:	21 b3       	in	r18, 0x11	; 17
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	6a 95       	dec	r22
 82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 82c:	82 2b       	or	r24, r18
 82e:	81 bb       	out	0x11, r24	; 17
 830:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 832:	21 b3       	in	r18, 0x11	; 17
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 842:	80 95       	com	r24
 844:	82 23       	and	r24, r18
 846:	81 bb       	out	0x11, r24	; 17
 848:	08 95       	ret

0000084a <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 84a:	68 30       	cpi	r22, 0x08	; 8
 84c:	08 f0       	brcs	.+2      	; 0x850 <GPIO_writePin+0x6>
 84e:	6f c0       	rjmp	.+222    	; 0x92e <__stack+0xcf>
 850:	84 30       	cpi	r24, 0x04	; 4
 852:	08 f0       	brcs	.+2      	; 0x856 <GPIO_writePin+0xc>
 854:	6c c0       	rjmp	.+216    	; 0x92e <__stack+0xcf>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	01 f1       	breq	.+64     	; 0x89a <__stack+0x3b>
 85a:	30 f0       	brcs	.+12     	; 0x868 <__stack+0x9>
 85c:	82 30       	cpi	r24, 0x02	; 2
 85e:	b1 f1       	breq	.+108    	; 0x8cc <__stack+0x6d>
 860:	83 30       	cpi	r24, 0x03	; 3
 862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x7>
 864:	4c c0       	rjmp	.+152    	; 0x8fe <__stack+0x9f>
 866:	08 95       	ret
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 868:	41 30       	cpi	r20, 0x01	; 1
 86a:	59 f4       	brne	.+22     	; 0x882 <__stack+0x23>
			{
				SET_BIT(PORTA,pin_num);
 86c:	2b b3       	in	r18, 0x1b	; 27
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	6a 95       	dec	r22
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	82 2b       	or	r24, r18
 87e:	8b bb       	out	0x1b, r24	; 27
 880:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 882:	2b b3       	in	r18, 0x1b	; 27
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	6a 95       	dec	r22
 890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
 892:	80 95       	com	r24
 894:	82 23       	and	r24, r18
 896:	8b bb       	out	0x1b, r24	; 27
 898:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 89a:	41 30       	cpi	r20, 0x01	; 1
 89c:	59 f4       	brne	.+22     	; 0x8b4 <__stack+0x55>
			{
				SET_BIT(PORTB,pin_num);
 89e:	28 b3       	in	r18, 0x18	; 24
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	6a 95       	dec	r22
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	82 2b       	or	r24, r18
 8b0:	88 bb       	out	0x18, r24	; 24
 8b2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 8b4:	28 b3       	in	r18, 0x18	; 24
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	6a 95       	dec	r22
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	80 95       	com	r24
 8c6:	82 23       	and	r24, r18
 8c8:	88 bb       	out	0x18, r24	; 24
 8ca:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 8cc:	41 30       	cpi	r20, 0x01	; 1
 8ce:	59 f4       	brne	.+22     	; 0x8e6 <__stack+0x87>
			{
				SET_BIT(PORTC,pin_num);
 8d0:	25 b3       	in	r18, 0x15	; 21
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	6a 95       	dec	r22
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	82 2b       	or	r24, r18
 8e2:	85 bb       	out	0x15, r24	; 21
 8e4:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 8e6:	25 b3       	in	r18, 0x15	; 21
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	6a 95       	dec	r22
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
 8f6:	80 95       	com	r24
 8f8:	82 23       	and	r24, r18
 8fa:	85 bb       	out	0x15, r24	; 21
 8fc:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 8fe:	41 30       	cpi	r20, 0x01	; 1
 900:	59 f4       	brne	.+22     	; 0x918 <__stack+0xb9>
			{
				SET_BIT(PORTD,pin_num);
 902:	22 b3       	in	r18, 0x12	; 18
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	6a 95       	dec	r22
 910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xab>
 912:	82 2b       	or	r24, r18
 914:	82 bb       	out	0x12, r24	; 18
 916:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 918:	22 b3       	in	r18, 0x12	; 18
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	6a 95       	dec	r22
 926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
 928:	80 95       	com	r24
 92a:	82 23       	and	r24, r18
 92c:	82 bb       	out	0x12, r24	; 18
 92e:	08 95       	ret

00000930 <__divsf3>:
 930:	0e 94 ac 04 	call	0x958	; 0x958 <__divsf3x>
 934:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_round>
 938:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscB>
 93c:	58 f0       	brcs	.+22     	; 0x954 <__divsf3+0x24>
 93e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_pscA>
 942:	40 f0       	brcs	.+16     	; 0x954 <__divsf3+0x24>
 944:	29 f4       	brne	.+10     	; 0x950 <__divsf3+0x20>
 946:	5f 3f       	cpi	r21, 0xFF	; 255
 948:	29 f0       	breq	.+10     	; 0x954 <__divsf3+0x24>
 94a:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_inf>
 94e:	51 11       	cpse	r21, r1
 950:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_szero>
 954:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_nan>

00000958 <__divsf3x>:
 958:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fp_split3>
 95c:	68 f3       	brcs	.-38     	; 0x938 <__divsf3+0x8>

0000095e <__divsf3_pse>:
 95e:	99 23       	and	r25, r25
 960:	b1 f3       	breq	.-20     	; 0x94e <__divsf3+0x1e>
 962:	55 23       	and	r21, r21
 964:	91 f3       	breq	.-28     	; 0x94a <__divsf3+0x1a>
 966:	95 1b       	sub	r25, r21
 968:	55 0b       	sbc	r21, r21
 96a:	bb 27       	eor	r27, r27
 96c:	aa 27       	eor	r26, r26
 96e:	62 17       	cp	r22, r18
 970:	73 07       	cpc	r23, r19
 972:	84 07       	cpc	r24, r20
 974:	38 f0       	brcs	.+14     	; 0x984 <__divsf3_pse+0x26>
 976:	9f 5f       	subi	r25, 0xFF	; 255
 978:	5f 4f       	sbci	r21, 0xFF	; 255
 97a:	22 0f       	add	r18, r18
 97c:	33 1f       	adc	r19, r19
 97e:	44 1f       	adc	r20, r20
 980:	aa 1f       	adc	r26, r26
 982:	a9 f3       	breq	.-22     	; 0x96e <__divsf3_pse+0x10>
 984:	35 d0       	rcall	.+106    	; 0x9f0 <__divsf3_pse+0x92>
 986:	0e 2e       	mov	r0, r30
 988:	3a f0       	brmi	.+14     	; 0x998 <__divsf3_pse+0x3a>
 98a:	e0 e8       	ldi	r30, 0x80	; 128
 98c:	32 d0       	rcall	.+100    	; 0x9f2 <__divsf3_pse+0x94>
 98e:	91 50       	subi	r25, 0x01	; 1
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	e6 95       	lsr	r30
 994:	00 1c       	adc	r0, r0
 996:	ca f7       	brpl	.-14     	; 0x98a <__divsf3_pse+0x2c>
 998:	2b d0       	rcall	.+86     	; 0x9f0 <__divsf3_pse+0x92>
 99a:	fe 2f       	mov	r31, r30
 99c:	29 d0       	rcall	.+82     	; 0x9f0 <__divsf3_pse+0x92>
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	bb 1f       	adc	r27, r27
 9a6:	26 17       	cp	r18, r22
 9a8:	37 07       	cpc	r19, r23
 9aa:	48 07       	cpc	r20, r24
 9ac:	ab 07       	cpc	r26, r27
 9ae:	b0 e8       	ldi	r27, 0x80	; 128
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <__divsf3_pse+0x56>
 9b2:	bb 0b       	sbc	r27, r27
 9b4:	80 2d       	mov	r24, r0
 9b6:	bf 01       	movw	r22, r30
 9b8:	ff 27       	eor	r31, r31
 9ba:	93 58       	subi	r25, 0x83	; 131
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	3a f0       	brmi	.+14     	; 0x9ce <__divsf3_pse+0x70>
 9c0:	9e 3f       	cpi	r25, 0xFE	; 254
 9c2:	51 05       	cpc	r21, r1
 9c4:	78 f0       	brcs	.+30     	; 0x9e4 <__divsf3_pse+0x86>
 9c6:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_inf>
 9ca:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_szero>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	e4 f3       	brlt	.-8      	; 0x9ca <__divsf3_pse+0x6c>
 9d2:	98 3e       	cpi	r25, 0xE8	; 232
 9d4:	d4 f3       	brlt	.-12     	; 0x9ca <__divsf3_pse+0x6c>
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b7 95       	ror	r27
 9de:	f7 95       	ror	r31
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__divsf3_pse+0x78>
 9e4:	88 0f       	add	r24, r24
 9e6:	91 1d       	adc	r25, r1
 9e8:	96 95       	lsr	r25
 9ea:	87 95       	ror	r24
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret
 9f0:	e1 e0       	ldi	r30, 0x01	; 1
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	bb 1f       	adc	r27, r27
 9fa:	62 17       	cp	r22, r18
 9fc:	73 07       	cpc	r23, r19
 9fe:	84 07       	cpc	r24, r20
 a00:	ba 07       	cpc	r27, r26
 a02:	20 f0       	brcs	.+8      	; 0xa0c <__divsf3_pse+0xae>
 a04:	62 1b       	sub	r22, r18
 a06:	73 0b       	sbc	r23, r19
 a08:	84 0b       	sbc	r24, r20
 a0a:	ba 0b       	sbc	r27, r26
 a0c:	ee 1f       	adc	r30, r30
 a0e:	88 f7       	brcc	.-30     	; 0x9f2 <__divsf3_pse+0x94>
 a10:	e0 95       	com	r30
 a12:	08 95       	ret

00000a14 <__fixsfsi>:
 a14:	0e 94 11 05 	call	0xa22	; 0xa22 <__fixunssfsi>
 a18:	68 94       	set
 a1a:	b1 11       	cpse	r27, r1
 a1c:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_szero>
 a20:	08 95       	ret

00000a22 <__fixunssfsi>:
 a22:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_splitA>
 a26:	88 f0       	brcs	.+34     	; 0xa4a <__fixunssfsi+0x28>
 a28:	9f 57       	subi	r25, 0x7F	; 127
 a2a:	98 f0       	brcs	.+38     	; 0xa52 <__fixunssfsi+0x30>
 a2c:	b9 2f       	mov	r27, r25
 a2e:	99 27       	eor	r25, r25
 a30:	b7 51       	subi	r27, 0x17	; 23
 a32:	b0 f0       	brcs	.+44     	; 0xa60 <__fixunssfsi+0x3e>
 a34:	e1 f0       	breq	.+56     	; 0xa6e <__fixunssfsi+0x4c>
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	1a f0       	brmi	.+6      	; 0xa46 <__fixunssfsi+0x24>
 a40:	ba 95       	dec	r27
 a42:	c9 f7       	brne	.-14     	; 0xa36 <__fixunssfsi+0x14>
 a44:	14 c0       	rjmp	.+40     	; 0xa6e <__fixunssfsi+0x4c>
 a46:	b1 30       	cpi	r27, 0x01	; 1
 a48:	91 f0       	breq	.+36     	; 0xa6e <__fixunssfsi+0x4c>
 a4a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_zero>
 a4e:	b1 e0       	ldi	r27, 0x01	; 1
 a50:	08 95       	ret
 a52:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_zero>
 a56:	67 2f       	mov	r22, r23
 a58:	78 2f       	mov	r23, r24
 a5a:	88 27       	eor	r24, r24
 a5c:	b8 5f       	subi	r27, 0xF8	; 248
 a5e:	39 f0       	breq	.+14     	; 0xa6e <__fixunssfsi+0x4c>
 a60:	b9 3f       	cpi	r27, 0xF9	; 249
 a62:	cc f3       	brlt	.-14     	; 0xa56 <__fixunssfsi+0x34>
 a64:	86 95       	lsr	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	b3 95       	inc	r27
 a6c:	d9 f7       	brne	.-10     	; 0xa64 <__fixunssfsi+0x42>
 a6e:	3e f4       	brtc	.+14     	; 0xa7e <__fixunssfsi+0x5c>
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__floatunsisf>:
 a80:	e8 94       	clt
 a82:	09 c0       	rjmp	.+18     	; 0xa96 <__floatsisf+0x12>

00000a84 <__floatsisf>:
 a84:	97 fb       	bst	r25, 7
 a86:	3e f4       	brtc	.+14     	; 0xa96 <__floatsisf+0x12>
 a88:	90 95       	com	r25
 a8a:	80 95       	com	r24
 a8c:	70 95       	com	r23
 a8e:	61 95       	neg	r22
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	99 23       	and	r25, r25
 a98:	a9 f0       	breq	.+42     	; 0xac4 <__floatsisf+0x40>
 a9a:	f9 2f       	mov	r31, r25
 a9c:	96 e9       	ldi	r25, 0x96	; 150
 a9e:	bb 27       	eor	r27, r27
 aa0:	93 95       	inc	r25
 aa2:	f6 95       	lsr	r31
 aa4:	87 95       	ror	r24
 aa6:	77 95       	ror	r23
 aa8:	67 95       	ror	r22
 aaa:	b7 95       	ror	r27
 aac:	f1 11       	cpse	r31, r1
 aae:	f8 cf       	rjmp	.-16     	; 0xaa0 <__floatsisf+0x1c>
 ab0:	fa f4       	brpl	.+62     	; 0xaf0 <__floatsisf+0x6c>
 ab2:	bb 0f       	add	r27, r27
 ab4:	11 f4       	brne	.+4      	; 0xaba <__floatsisf+0x36>
 ab6:	60 ff       	sbrs	r22, 0
 ab8:	1b c0       	rjmp	.+54     	; 0xaf0 <__floatsisf+0x6c>
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <__floatsisf+0x6c>
 ac4:	88 23       	and	r24, r24
 ac6:	11 f0       	breq	.+4      	; 0xacc <__floatsisf+0x48>
 ac8:	96 e9       	ldi	r25, 0x96	; 150
 aca:	11 c0       	rjmp	.+34     	; 0xaee <__floatsisf+0x6a>
 acc:	77 23       	and	r23, r23
 ace:	21 f0       	breq	.+8      	; 0xad8 <__floatsisf+0x54>
 ad0:	9e e8       	ldi	r25, 0x8E	; 142
 ad2:	87 2f       	mov	r24, r23
 ad4:	76 2f       	mov	r23, r22
 ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__floatsisf+0x5e>
 ad8:	66 23       	and	r22, r22
 ada:	71 f0       	breq	.+28     	; 0xaf8 <__floatsisf+0x74>
 adc:	96 e8       	ldi	r25, 0x86	; 134
 ade:	86 2f       	mov	r24, r22
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	2a f0       	brmi	.+10     	; 0xaf0 <__floatsisf+0x6c>
 ae6:	9a 95       	dec	r25
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	da f7       	brpl	.-10     	; 0xae6 <__floatsisf+0x62>
 af0:	88 0f       	add	r24, r24
 af2:	96 95       	lsr	r25
 af4:	87 95       	ror	r24
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret

00000afa <__fp_inf>:
 afa:	97 f9       	bld	r25, 7
 afc:	9f 67       	ori	r25, 0x7F	; 127
 afe:	80 e8       	ldi	r24, 0x80	; 128
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	60 e0       	ldi	r22, 0x00	; 0
 b04:	08 95       	ret

00000b06 <__fp_nan>:
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	80 ec       	ldi	r24, 0xC0	; 192
 b0a:	08 95       	ret

00000b0c <__fp_pscA>:
 b0c:	00 24       	eor	r0, r0
 b0e:	0a 94       	dec	r0
 b10:	16 16       	cp	r1, r22
 b12:	17 06       	cpc	r1, r23
 b14:	18 06       	cpc	r1, r24
 b16:	09 06       	cpc	r0, r25
 b18:	08 95       	ret

00000b1a <__fp_pscB>:
 b1a:	00 24       	eor	r0, r0
 b1c:	0a 94       	dec	r0
 b1e:	12 16       	cp	r1, r18
 b20:	13 06       	cpc	r1, r19
 b22:	14 06       	cpc	r1, r20
 b24:	05 06       	cpc	r0, r21
 b26:	08 95       	ret

00000b28 <__fp_round>:
 b28:	09 2e       	mov	r0, r25
 b2a:	03 94       	inc	r0
 b2c:	00 0c       	add	r0, r0
 b2e:	11 f4       	brne	.+4      	; 0xb34 <__fp_round+0xc>
 b30:	88 23       	and	r24, r24
 b32:	52 f0       	brmi	.+20     	; 0xb48 <__fp_round+0x20>
 b34:	bb 0f       	add	r27, r27
 b36:	40 f4       	brcc	.+16     	; 0xb48 <__fp_round+0x20>
 b38:	bf 2b       	or	r27, r31
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0x18>
 b3c:	60 ff       	sbrs	r22, 0
 b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__fp_round+0x20>
 b40:	6f 5f       	subi	r22, 0xFF	; 255
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	08 95       	ret

00000b4a <__fp_split3>:
 b4a:	57 fd       	sbrc	r21, 7
 b4c:	90 58       	subi	r25, 0x80	; 128
 b4e:	44 0f       	add	r20, r20
 b50:	55 1f       	adc	r21, r21
 b52:	59 f0       	breq	.+22     	; 0xb6a <__fp_splitA+0x10>
 b54:	5f 3f       	cpi	r21, 0xFF	; 255
 b56:	71 f0       	breq	.+28     	; 0xb74 <__fp_splitA+0x1a>
 b58:	47 95       	ror	r20

00000b5a <__fp_splitA>:
 b5a:	88 0f       	add	r24, r24
 b5c:	97 fb       	bst	r25, 7
 b5e:	99 1f       	adc	r25, r25
 b60:	61 f0       	breq	.+24     	; 0xb7a <__fp_splitA+0x20>
 b62:	9f 3f       	cpi	r25, 0xFF	; 255
 b64:	79 f0       	breq	.+30     	; 0xb84 <__fp_splitA+0x2a>
 b66:	87 95       	ror	r24
 b68:	08 95       	ret
 b6a:	12 16       	cp	r1, r18
 b6c:	13 06       	cpc	r1, r19
 b6e:	14 06       	cpc	r1, r20
 b70:	55 1f       	adc	r21, r21
 b72:	f2 cf       	rjmp	.-28     	; 0xb58 <__fp_split3+0xe>
 b74:	46 95       	lsr	r20
 b76:	f1 df       	rcall	.-30     	; 0xb5a <__fp_splitA>
 b78:	08 c0       	rjmp	.+16     	; 0xb8a <__fp_splitA+0x30>
 b7a:	16 16       	cp	r1, r22
 b7c:	17 06       	cpc	r1, r23
 b7e:	18 06       	cpc	r1, r24
 b80:	99 1f       	adc	r25, r25
 b82:	f1 cf       	rjmp	.-30     	; 0xb66 <__fp_splitA+0xc>
 b84:	86 95       	lsr	r24
 b86:	71 05       	cpc	r23, r1
 b88:	61 05       	cpc	r22, r1
 b8a:	08 94       	sec
 b8c:	08 95       	ret

00000b8e <__fp_zero>:
 b8e:	e8 94       	clt

00000b90 <__fp_szero>:
 b90:	bb 27       	eor	r27, r27
 b92:	66 27       	eor	r22, r22
 b94:	77 27       	eor	r23, r23
 b96:	cb 01       	movw	r24, r22
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__divmodhi4>:
 b9c:	97 fb       	bst	r25, 7
 b9e:	07 2e       	mov	r0, r23
 ba0:	16 f4       	brtc	.+4      	; 0xba6 <__divmodhi4+0xa>
 ba2:	00 94       	com	r0
 ba4:	07 d0       	rcall	.+14     	; 0xbb4 <__divmodhi4_neg1>
 ba6:	77 fd       	sbrc	r23, 7
 ba8:	09 d0       	rcall	.+18     	; 0xbbc <__divmodhi4_neg2>
 baa:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__udivmodhi4>
 bae:	07 fc       	sbrc	r0, 7
 bb0:	05 d0       	rcall	.+10     	; 0xbbc <__divmodhi4_neg2>
 bb2:	3e f4       	brtc	.+14     	; 0xbc2 <__divmodhi4_exit>

00000bb4 <__divmodhi4_neg1>:
 bb4:	90 95       	com	r25
 bb6:	81 95       	neg	r24
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	08 95       	ret

00000bbc <__divmodhi4_neg2>:
 bbc:	70 95       	com	r23
 bbe:	61 95       	neg	r22
 bc0:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc2 <__divmodhi4_exit>:
 bc2:	08 95       	ret

00000bc4 <__udivmodhi4>:
 bc4:	aa 1b       	sub	r26, r26
 bc6:	bb 1b       	sub	r27, r27
 bc8:	51 e1       	ldi	r21, 0x11	; 17
 bca:	07 c0       	rjmp	.+14     	; 0xbda <__udivmodhi4_ep>

00000bcc <__udivmodhi4_loop>:
 bcc:	aa 1f       	adc	r26, r26
 bce:	bb 1f       	adc	r27, r27
 bd0:	a6 17       	cp	r26, r22
 bd2:	b7 07       	cpc	r27, r23
 bd4:	10 f0       	brcs	.+4      	; 0xbda <__udivmodhi4_ep>
 bd6:	a6 1b       	sub	r26, r22
 bd8:	b7 0b       	sbc	r27, r23

00000bda <__udivmodhi4_ep>:
 bda:	88 1f       	adc	r24, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	5a 95       	dec	r21
 be0:	a9 f7       	brne	.-22     	; 0xbcc <__udivmodhi4_loop>
 be2:	80 95       	com	r24
 be4:	90 95       	com	r25
 be6:	bc 01       	movw	r22, r24
 be8:	cd 01       	movw	r24, r26
 bea:	08 95       	ret

00000bec <itoa>:
 bec:	45 32       	cpi	r20, 0x25	; 37
 bee:	51 05       	cpc	r21, r1
 bf0:	20 f4       	brcc	.+8      	; 0xbfa <itoa+0xe>
 bf2:	42 30       	cpi	r20, 0x02	; 2
 bf4:	10 f0       	brcs	.+4      	; 0xbfa <itoa+0xe>
 bf6:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__itoa_ncheck>
 bfa:	fb 01       	movw	r30, r22
 bfc:	10 82       	st	Z, r1
 bfe:	cb 01       	movw	r24, r22
 c00:	08 95       	ret

00000c02 <__itoa_ncheck>:
 c02:	bb 27       	eor	r27, r27
 c04:	4a 30       	cpi	r20, 0x0A	; 10
 c06:	31 f4       	brne	.+12     	; 0xc14 <__itoa_ncheck+0x12>
 c08:	99 23       	and	r25, r25
 c0a:	22 f4       	brpl	.+8      	; 0xc14 <__itoa_ncheck+0x12>
 c0c:	bd e2       	ldi	r27, 0x2D	; 45
 c0e:	90 95       	com	r25
 c10:	81 95       	neg	r24
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__utoa_common>

00000c18 <__utoa_ncheck>:
 c18:	bb 27       	eor	r27, r27

00000c1a <__utoa_common>:
 c1a:	fb 01       	movw	r30, r22
 c1c:	55 27       	eor	r21, r21
 c1e:	aa 27       	eor	r26, r26
 c20:	88 0f       	add	r24, r24
 c22:	99 1f       	adc	r25, r25
 c24:	aa 1f       	adc	r26, r26
 c26:	a4 17       	cp	r26, r20
 c28:	10 f0       	brcs	.+4      	; 0xc2e <__utoa_common+0x14>
 c2a:	a4 1b       	sub	r26, r20
 c2c:	83 95       	inc	r24
 c2e:	50 51       	subi	r21, 0x10	; 16
 c30:	b9 f7       	brne	.-18     	; 0xc20 <__utoa_common+0x6>
 c32:	a0 5d       	subi	r26, 0xD0	; 208
 c34:	aa 33       	cpi	r26, 0x3A	; 58
 c36:	08 f0       	brcs	.+2      	; 0xc3a <__utoa_common+0x20>
 c38:	a9 5d       	subi	r26, 0xD9	; 217
 c3a:	a1 93       	st	Z+, r26
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	79 f7       	brne	.-34     	; 0xc1e <__utoa_common+0x4>
 c40:	b1 11       	cpse	r27, r1
 c42:	b1 93       	st	Z+, r27
 c44:	11 92       	st	Z+, r1
 c46:	cb 01       	movw	r24, r22
 c48:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <strrev>

00000c4c <strrev>:
 c4c:	dc 01       	movw	r26, r24
 c4e:	fc 01       	movw	r30, r24
 c50:	67 2f       	mov	r22, r23
 c52:	71 91       	ld	r23, Z+
 c54:	77 23       	and	r23, r23
 c56:	e1 f7       	brne	.-8      	; 0xc50 <strrev+0x4>
 c58:	32 97       	sbiw	r30, 0x02	; 2
 c5a:	04 c0       	rjmp	.+8      	; 0xc64 <strrev+0x18>
 c5c:	7c 91       	ld	r23, X
 c5e:	6d 93       	st	X+, r22
 c60:	70 83       	st	Z, r23
 c62:	62 91       	ld	r22, -Z
 c64:	ae 17       	cp	r26, r30
 c66:	bf 07       	cpc	r27, r31
 c68:	c8 f3       	brcs	.-14     	; 0xc5c <strrev+0x10>
 c6a:	08 95       	ret

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
